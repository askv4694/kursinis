View(mat)
for(i in 1:5){
mat1$A[i] <- sum(abs(mat$A-mat[,i]))
}
mat1
mat1 <- mat
mat1[5,] <- 0
mat1
for(i in 1:5){
mat1$A[i] <- sum(abs(mat$A-mat[,i]))
}
mat1
for(i in 1:5){
mat1$B[i] <- sum(abs(mat$B-mat[,i]))
}
mat1
for(j in 1:5){
for(i in 1:5){
mat1[,j] <- sum(abs(mat[,j]-mat[,i]))
}
}
mat1 <- mat
mat1[5,] <- 0
mat1
for(j in 1:5){
for(i in 1:5){
mat1[,j] <- sum(abs(mat[,j]-mat[,i]))
}
}
mat1
mat1 <- mat
mat1[5,] <- 0
mat1
for(j in 1:5){
for(i in 1:5){
mat1[,j][i] <- sum(abs(mat[,j]-mat[,i]))
}
}
mat1
for(j in 1:5){
for(j in 1:5){
for(i in 1:5){
mat1[,j][i] <- sum(abs(mat[,j]-mat[,i]))
}
}
mat1
5656
ddd
d
}
for(j in 1:5){
for(i in 1:5){
mat1[,j][i] <- sum(abs(mat[,j]-mat[,i]))
}
}
mat1
knitr::opts_chunk$set(
message = FALSE,
error = TRUE,
echo = FALSE
)
#if(!require("treemap"))install.packages("treemap")
#if(!require("d3treeR"))install.packages("d3treeR")
#if(!require("hrbrthemes"))install.packages("hrbrthemes")
sample <- read.csv("../output/sampleKey.csv")
beta <- readRDS("../../Komanda/output/betab.rds")
anno <- readRDS("../../Komanda/output/annotation.rds")
library("S4Vectors")
sample
case <- sample[sample$sample == "Alzheimer",]
#case
caseM <- case[case$sex == "M",]
#caseM
#unique(as.character(caseM$source_name_ch1))
#caseMnames <- caseM$sample_id
#So if I Want to color each leaf of the Tree, I have to change the attribute of each leaf. This can be done using the dendrapply function. So I create a function that # # add 3 attributes to the leaf : one for the color (“lab.col”) ,one for the font “lab.font” and one for the size (“lab.cex”).
plotcase<- function(case){
casenames <- case$sample_id
betaCase <- beta[, casenames]
#head(betaCase)
colnames(betaCase) <- case$geo_accession
i=0
tdata <- t(betaCase)
tdata <- as.data.frame(tdata)
#dim(tdata)
tdata$loc <- case$tissue_region
#tdata
last <- ncol(tdata)
colLab<<-function(n){
if(is.leaf(n)){
#I take the current attributes
a=attributes(n)
#I deduce the line in the original data, and so the treatment and the specie.
ligne <- match(attributes(n)$label,rownames(tdata))
control <- as.character(tdata[ligne,last]);
if(control=="CRB"){col_con="blue"};
if(control=="DLPFC"){col_con="red"};
if(control=="ERC"){col_con="orange"};
if(control=="HIPPO"){col_con="green"};
attr(n,"nodePar")<-c(a$nodePar,list(cex=1.5,lab.cex=1,pch=20,col=col_con,
lab.col = col_con,lab.font=1,lab.cex=1))
}
return(n)
}
hc <- hclust(dist(tdata))
dhc <- as.dendrogram(hc)
dL <- dendrapply(dhc, colLab)
return(dL)
}
# Finally I just have to apply this to my dendrogram
par(mar=c(8,4,4,4))
dL <- plotcase(caseM)
plot(dL , main="All males that has Alzheimer",xaxt="n")
#axis(1, at=1:length(caseM$type), labels= caseM$geo_accession)
legend("topright", title = "Region",
legend = c("CRB", "DLPFC", "ERC", "HIPPO"),
col = c("red", "blue", "yellow", "green"),
pch = c(20,20,20,20), bty = "n",  pt.cex = 1.5, cex = 0.8 ,
text.col = "black", horiz = FALSE, inset = c(0, 0.1))
par(mfrow = c(1, 1))
dL <- plotcase(case)
plot(dL , main="People with Alzheimer disease", horiz=TRUE,xaxt="n")
axis(1,cex.axis=0.6)
#axis(1, at=1:length(caseM$type), labels= caseM$geo_accession)
legend("topleft", title = "Region",
legend = c("CRB", "DLPFC", "ERC", "HIPPO"),
col = c("red", "blue", "yellow", "green"),
pch = c(20,20,20,20), bty = "n",  pt.cex = 1.5, cex = 0.8 ,
text.col = "black", horiz = FALSE, inset = c(0, 0.1))
#rm(list = ls())
plot(dL , main="People with Alzheimer disease", horiz=TRUE,xaxt="n")
axis(2,cex.axis=0.6)
#axis(1, at=1:length(caseM$type), labels= caseM$geo_accession)
legend("topleft", title = "Region",
legend = c("CRB", "DLPFC", "ERC", "HIPPO"),
col = c("red", "blue", "yellow", "green"),
pch = c(20,20,20,20), bty = "n",  pt.cex = 1.5, cex = 0.8 ,
text.col = "black", horiz = FALSE, inset = c(0, 0.1))
#rm(list = ls())
plot(dL , main="People with Alzheimer disease", horiz=TRUE,xaxt="n")
#axis(2,cex.axis=0.6)
#axis(1, at=1:length(caseM$type), labels= caseM$geo_accession)
legend("topleft", title = "Region",
legend = c("CRB", "DLPFC", "ERC", "HIPPO"),
col = c("red", "blue", "yellow", "green"),
pch = c(20,20,20,20), bty = "n",  pt.cex = 1.5, cex = 0.8 ,
text.col = "black", horiz = FALSE, inset = c(0, 0.1))
#rm(list = ls())
plot(dL , main="People with Alzheimer disease", horiz=TRUE,xaxt="n")
#axis(2,cex.axis=0.6)
#axis(1, at=1:length(caseM$type), labels= caseM$geo_accession)
legend("topleft", title = "Region",
legend = c("CRB", "DLPFC", "ERC", "HIPPO"),
col = c("red", "blue", "yellow", "green"),
pch = c(20,20,20,20), bty = "n",  pt.cex = 1.5, cex = 0.8 ,
text.col = "black", horiz = FALSE, inset = c(0, 0.1))
#rm(list = ls())
plot(dL , main="People with Alzheimer disease", horiz=TRUE,xaxt="n")
#axis(2,cex.axis=0.6)
#axis(1, at=1:length(caseM$type), labels= caseM$geo_accession)
legend("topleft", title = "Region",
legend = c("CRB", "DLPFC", "ERC", "HIPPO"),
col = c("red", "blue", "yellow", "green"),
pch = c(20,20,20,20), bty = "n",  pt.cex = 1.5, cex = 0.8 ,
text.col = "black", horiz = FALSE, inset = c(0, 0.1))
#rm(list = ls())
#So if I Want to color each leaf of the Tree, I have to change the attribute of each leaf. This can be done using the dendrapply function. So I create a function that # # add 3 attributes to the leaf : one for the color (“lab.col”) ,one for the font “lab.font” and one for the size (“lab.cex”).
plotcase<- function(case, size){
casenames <- case$sample_id
betaCase <- beta[, casenames]
#head(betaCase)
colnames(betaCase) <- case$geo_accession
i=0
tdata <- t(betaCase)
tdata <- as.data.frame(tdata)
#dim(tdata)
tdata$loc <- case$tissue_region
#tdata
last <- ncol(tdata)
colLab<<-function(n){
if(is.leaf(n)){
#I take the current attributes
a=attributes(n)
#I deduce the line in the original data, and so the treatment and the specie.
ligne <- match(attributes(n)$label,rownames(tdata))
control <- as.character(tdata[ligne,last]);
if(control=="CRB"){col_con="blue"};
if(control=="DLPFC"){col_con="red"};
if(control=="ERC"){col_con="orange"};
if(control=="HIPPO"){col_con="green"};
attr(n,"nodePar")<-c(a$nodePar,list(cex=1.5,lab.cex=1,pch=20,col=col_con,
lab.col = col_con,lab.font=1,lab.cex=size))
}
return(n)
}
hc <- hclust(dist(tdata))
dhc <- as.dendrogram(hc)
dL <- dendrapply(dhc, colLab)
return(dL)
}
# Finally I just have to apply this to my dendrogram
dL <- plotcase(case,0.8)
plot(dL , main="People with Alzheimer disease", horiz=TRUE,xaxt="n")
#axis(2,cex.axis=0.6)
#axis(1, at=1:length(caseM$type), labels= caseM$geo_accession)
legend("topleft", title = "Region",
legend = c("CRB", "DLPFC", "ERC", "HIPPO"),
col = c("red", "blue", "yellow", "green"),
pch = c(20,20,20,20), bty = "n",  pt.cex = 1.5, cex = 0.8 ,
text.col = "black", horiz = FALSE, inset = c(0, 0.1))
#rm(list = ls())
plot(dL , main="People with Alzheimer disease", horiz=TRUE,xaxt="n")
#axis(2,cex.axis=0.6)
#axis(1, at=1:length(caseM$type), labels= caseM$geo_accession)
legend("topleft", title = "Region",
legend = c("CRB", "DLPFC", "ERC", "HIPPO"),
col = c("red", "blue", "yellow", "green"),
pch = c(20,20,20,20), bty = "n",  pt.cex = 1.5, cex = 0.8 ,
text.col = "black", horiz = FALSE, inset = c(0, 0.1))
#rm(list = ls())
sample <- read.csv("../output/sampleKey.csv")
anno <- readRDS("../../Komanda/output/annotation.rds")
beta <- readRDS("../../Komanda/output/betab.rds")
unique(sample$sample_plate)
unique(as.character(sample$sample_plate))
unique(as.character(sample$tissue_region))
sample
min(sample$age[sample$sample == "Alzheimer",])
min(sample$age[sample$sample == "Alzheimer"])
min <- min(sample$age[sample$sample == "Alzheimer"])
case <- sample[sample$age > min,]
case
case <- sample[sample$age < min,]
case
case <- sample[sample$age < 40,]
case
case <- sample[sample$age < 50,]
case
case <- sample[sample$age < 55,]
case
unique(as.character(sample$race))
case <- sample[sample$age > min,]
case
case <- sample[sample$age > min && sample$race = "AA",]
case
case <- sample[sample$age > min && sample$race = "AA",]
case <- sample[sample$age > min && sample$race == "AA",]
case
case <- sample[sample$age > min,]
case
print(paste0(sample$race[1]))
print(paste0(sample$race[2]))
print(paste0("1",sample$race[2], "2"))
case <- sample[sample$age > min && sample$race == "AA",]
case
case <- sample[sample$age > min,] && sample[sample$race == "AA",]
case
case <- sample[sample$age > min,] && sample[sample$race == "AA",]
case <- sample[sample$age > min,]
case
case <- sample[sample$race == "AA",]
case
case <- sample[sample$race == "CAUC",]
case
case <- sample[sample$race == "AA",]
case
case <- sample[sample$age > min,]
case <- sample[sample$race == "AA",]
case
case <- sample[sample$age > min,]
case <- case[case$race == "AA",]
case
case <- sample[sample$age > min,]
case
case <- case[case$race == "AA",]
case
case <- sample[sample$age > min,]
case
case <- sample[sample$age < min,]
case
case <- case[case$race == "AA",]
case
case <- case[case$race == "CAUC",]
case
case <- sample[sample$age < min,]
case <- case[case$race == "CAUC",]
case
unique(as.character(case$source_name_ch1))
case
unique(as.character(case$sample))
case
case <- sample[sample$age < 55,]
case
unique(as.character(case$sample))
case
case <- sample[sample$age < 60,]
case
unique(as.character(case$sample))
case
case <- sample[sample$race == "AA",]
case
unique(as.character(case$sample))
case
case <- case[case$sample_plate == "Plate 1",]
case
unique(as.character(case$sample))
unique(as.character(case$tissue_region))
case
min <- min(sample$age[sample$sample == "Alzheimer"])
case <- case[case$age > min,]
case
min <- min(sample$age[sample$sample == "Alzheimer"])
case <- sample[sample$race == "AA",]
case <- case[case$sample_plate == "Plate 2",]
case <- case[case$age > min,]
case
e
unique(as.character(case$sample))
unique(as.character(case$tissue_region))
knitr::opts_chunk$set(
message = FALSE,
error = FALSE,
echo = FALSE
)
#if(!require("treemap"))install.packages("treemap")
#if(!require("d3treeR"))install.packages("d3treeR")
#if(!require("hrbrthemes"))install.packages("hrbrthemes")
sample <- read.csv("../output/sampleKey.csv")
beta <- readRDS("../../Komanda/output/betab.rds")
anno <- readRDS("../../Komanda/output/annotation.rds")
library("S4Vectors")
sample
min <- min(sample$age[sample$sample == "Alzheimer"])
case <- sample[sample$race == "AA",]
case <- case[case$sample_plate == "Plate 2",]
case <- case[case$age > min,]
case
unique(as.character(case$sample))
unique(as.character(case$tissue_region))
data <- case
rm(case)
hc <- hclust(dist(data))
dhc <- as.dendrogram(hc)
# set the margin
par(mar=c(4,4,2,2))
# Plot the Second group
plot(dhc[[2]] , main= "zoom on a part of the dendrogram")
specific_leaf <- dhc[[2]][[1]][[2]]
plot(specific_leaf)
plot(hc, labels = FALSE)
if(!require("GGally"))install.packages("GGally")
library(GGally)
library(ggplot2)
library(hrbrthemes)
library(moduleColor)
tm <- matrix(nrow = nrow(data), ncol = 2)
#tm[1:5, 1:2]
for (i in 1:nrow(data)){
mean <- mean(as.numeric(data[i,]))
tm[i,] <- c(rownames(data)[i], mean)
}
tm <- tm[order(tm[,2], decreasing = TRUE),]
tdata <- t(data[tm[1:100,1],])
sample
min <- min(sample$age[sample$sample == "Alzheimer"])
case <- sample[sample$race == "AA",]
case <- case[case$sample_plate == "Plate 2",]
case <- case[case$age > min,]
case
unique(as.character(case$sample))
unique(as.character(case$tissue_region))
data <- data[case$]
data <- data[case$sample_id,]
nrow(data)
beta <- readRDS("../../Komanda/output/betab.rds")
knitr::opts_chunk$set(
message = FALSE,
error = FALSE,
echo = FALSE
)
#if(!require("treemap"))install.packages("treemap")
#if(!require("d3treeR"))install.packages("d3treeR")
#if(!require("hrbrthemes"))install.packages("hrbrthemes")
sample <- read.csv("../output/sampleKey.csv")
beta <- readRDS("../../Komanda/output/betab.rds")
anno <- readRDS("../../Komanda/output/annotation.rds")
library("S4Vectors")
sample
min <- min(sample$age[sample$sample == "Alzheimer"])
case <- sample[sample$race == "AA",]
case <- case[case$sample_plate == "Plate 2",]
case <- case[case$age > min,]
case
unique(as.character(case$sample))
unique(as.character(case$tissue_region))
data <- beta[case$sample_id,]
hc <- hclust(dist(data))
dhc <- as.dendrogram(hc)
# set the margin
par(mar=c(4,4,2,2))
# Plot the Second group
plot(dhc[[2]] , main= "zoom on a part of the dendrogram")
specific_leaf <- dhc[[2]][[1]][[2]]
plot(specific_leaf)
plot(hc, labels = FALSE)
if(!require("GGally"))install.packages("GGally")
library(GGally)
library(ggplot2)
library(hrbrthemes)
library(moduleColor)
tm <- matrix(nrow = nrow(data), ncol = 2)
#tm[1:5, 1:2]
for (i in 1:nrow(data)){
mean <- mean(as.numeric(data[i,]))
tm[i,] <- c(rownames(data)[i], mean)
}
#tm <- tm[order(tm[,2], decreasing = TRUE),]
#tdata <- t(data[tm[1:100,1],])
tdata <- as.data.frame(data)
tdata$status <- case$sample
#tdata
#for (i in 1:ncol(tdata)){
#  if (as.character(tdata$status[i]) == "Control") {
#    tdata$stnum[i] <- 2
#  }else {
#    tdata$stnum[i] <- 4
#  }
#}
#typeof(plate1$sample)
#as.character(plate1$sample)
ggparcoord(tdata,
columns = 1:(ncol(tdata)-1), groupColumn = ncol(tdata),
scale="uniminmax",
showPoints = TRUE
)
data
ncol(data)
data <- beta[,case$sample_id]
ncol(data)
nrow(data)
sample
min <- min(sample$age[sample$sample == "Alzheimer"])
case <- sample[sample$race == "AA",]
case <- case[case$sample_plate == "Plate 2",]
case <- case[case$age > min,]
case
unique(as.character(case$sample))
unique(as.character(case$tissue_region))
data <- beta[,case$sample_id]
hc <- hclust(dist(data))
hc <- hclust(as.dist(data))
hc <- hclust(dist(data))
#tdata <- t(data[tm[1:100,1],])
tdata <- as.data.frame(data)
tdata$status <- case$sample
data <- beta[case$sample_id,]
dim(data)
data <- beta[,case$sample_id]
dim(data)
sample
min <- min(sample$age[sample$sample == "Alzheimer"])
case <- sample[sample$race == "AA",]
case <- case[case$sample_plate == "Plate 2",]
case <- case[case$age > min,]
case
unique(as.character(case$sample))
unique(as.character(case$tissue_region))
data <- beta[,case$sample_id]
data <- t(data)
hc <- hclust(dist(data))
dhc <- as.dendrogram(hc)
# set the margin
par(mar=c(4,4,2,2))
# Plot the Second group
plot(dhc[[2]] , main= "zoom on a part of the dendrogram")
specific_leaf <- dhc[[2]][[1]][[2]]
plot(specific_leaf)
plot(hc, labels = FALSE)
if(!require("GGally"))install.packages("GGally")
library(GGally)
library(ggplot2)
library(hrbrthemes)
library(moduleColor)
#tm <- matrix(nrow = nrow(data), ncol = 2)
#tm[1:5, 1:2]
#for (i in 1:nrow(data)){
#    mean <- mean(as.numeric(data[i,]))
#    tm[i,] <- c(rownames(data)[i], mean)
#}
#tm <- tm[order(tm[,2], decreasing = TRUE),]
#tdata <- t(data[tm[1:100,1],])
tdata <- as.data.frame(data)
tdata$status <- case$sample
#tdata
#for (i in 1:ncol(tdata)){
#  if (as.character(tdata$status[i]) == "Control") {
#    tdata$stnum[i] <- 2
#  }else {
#    tdata$stnum[i] <- 4
#  }
#}
#typeof(plate1$sample)
#as.character(plate1$sample)
ggparcoord(tdata,
columns = 1:(ncol(tdata)-1), groupColumn = ncol(tdata),
scale="uniminmax",
showPoints = TRUE
)
if(!require("GGally"))install.packages("GGally")
library(GGally)
library(ggplot2)
library(hrbrthemes)
